PARSER_BEGIN(Parser)

package lkh.dot.parser;

import lkh.automata.NonDeterministicAutomaton;

public class Parser {
  public static NonDeterministicAutomaton<String, String> nfa;
}

PARSER_END(Parser)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
}

TOKEN :
{
  < GRAPH : "graph" >
  | < DIGRAPH : "digraph" >
  | < RARROW : "->" >
  | < LABEL : "label" >
  | < ID : (["a"-"z","A"-"Z","_","0"-"9"])+ >
}

NonDeterministicAutomaton<String, String> Graph() :
{ nfa = new NonDeterministicAutomaton<>(); }
{
  <DIGRAPH> <ID> "{" stmtList() "}" <EOF>
  { return nfa; }
}

void stmtList() :
{}
{
  stmt() (";" stmt())*
}

void stmt() :
{ Token id; }
{
  // nodeStmt() | edgeStmt()
  id=<ID> rStmt(id)
}

void rStmt(Token lid) :
{ Token rid; }
{
  <RARROW> rid=<ID> rEdgeStmt(lid, rid)
  |
  { nfa.addState(lid.image); }
}

void rEdgeStmt(Token lid, Token rid) :
{ String l; }
{
  l=label()
  { nfa.addTransition(lid.image, rid.image, l); }
  |
  { nfa.addEmptyTransition(lid.image, rid.image); }
}

String label() :
{ Token id; }
{
  "[" <LABEL> "=" "\""id=<ID>"\"" "]"
  { return id.image; }
}
